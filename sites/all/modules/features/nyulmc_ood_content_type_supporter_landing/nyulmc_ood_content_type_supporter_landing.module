<?php
/**
 * @file
 * Code for the NYULMC OOD Content Type Supporter Landing feature.
 */

include_once 'nyulmc_ood_content_type_supporter_landing.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nyulmc_ood_content_type_supporter_landing_form_supporter_landing_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_supporter_landing_story'][LANGUAGE_NONE][0]['field_supp_landing_story_ref'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'autocomplete/speeches_and_passion_stories';
  $form['field_supp_land_2_n_3_feat_story'][LANGUAGE_NONE][0]['field_supp_landing_story_ref'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'autocomplete/speeches_and_passion_stories';
  $form['field_supp_land_2_n_3_feat_story'][LANGUAGE_NONE][1]['field_supp_landing_story_ref'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'autocomplete/speeches_and_passion_stories';

  $singlteton_exists = nyulmc_ood_core_node_type_exists('supporter_landing', $form['nid']['#value']);

  if($singlteton_exists){
    drupal_set_message(t('A published Supporter Landing page already exists. <a href="' . base_path() . 'node/' . $singlteton_exists . '/edit">Click here</a> to edit that node.'), 'warning');

    drupal_set_message(t('If you publish a new Supporter Landing page, the existing version will be unpublished.'), 'warning');
  }
}

/**
 * Implements hook_menu().
 */
function nyulmc_ood_content_type_supporter_landing_menu() {
  $items['autocomplete/speeches_and_passion_stories'] = array(
    'page callback' => '_nyulmc_ood_content_type_supporter_landing_autocomplete',
    'access arguments' => array('access example autocomplete'),
    'type' => MENU_CALLBACK
  );
  return $items;

}

/**
 * autocomplete callback for speeches
 *
 * @param $string
 */
function _nyulmc_ood_content_type_supporter_landing_autocomplete($string) {
  $matches = _nyulmc_ood_content_type_supporter_landing_get_speeches_by_string($string);

  // return for JS
  drupal_json_output($matches);
}

/**
 * @param string $string
 */
function _nyulmc_ood_content_type_supporter_landing_get_speeches_by_string($string) {
  $helper = new nyulmcServiceHelpers();

  $node_select = db_select('field_data_field_event_speech_speaker', 's');
  $node_select->join('field_data_field_event_speeches', 'sp', 's.entity_id = sp.field_event_speeches_value');
  $node_select->fields('s')->fields('sp')->condition('field_event_speech_speaker_value', '%' . db_like($string) . '%', 'LIKE')
    ->orderBy('s.entity_id', 'DESC');
  $rows = $node_select->execute()->fetchAllAssoc('field_event_speeches_value');

  $return_array_speeches = array();
  foreach ($rows as $row) {
    $event = entity_metadata_wrapper('node', $row->entity_id);
    $event_title = $helper->prepareOutput($event->title->value());

    $speech = entity_metadata_wrapper('field_collection_item', $row->field_event_speeches_value);
    $speech_speaker = $helper->prepareBody($speech->field_event_speech_speaker);

    $return_array_speeches['speech-' . $row->field_event_speeches_value] = sprintf('%s (Event: %s)', $speech_speaker, $event_title);
  }

  $return_array_passion_stories = array();
  $node_select_passion_stories = db_select('node', 'n')
    ->fields('n')
    ->condition('type', 'passion_story', '=')
    ->condition('title', '%' . db_like($string) . '%', 'LIKE')
    ->orderBy('nid', 'DESC')
    ->execute()->fetchAllAssoc('nid');

  foreach ($node_select_passion_stories as $row) {
    $passion_story = entity_metadata_wrapper('node', $row->nid);
    $passion_story_title = $helper->prepareOutput($passion_story->title->value());
    $return_array_passion_stories['passion-story-' . $row->nid] = sprintf('%s (Passion Story)', $passion_story_title);
  }
  return array_merge($return_array_passion_stories, $return_array_speeches);
}
