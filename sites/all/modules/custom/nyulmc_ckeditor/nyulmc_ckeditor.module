<?php
/**
 * @file
 *
 * Add our plugins to CKEditor, the non-invasive way.
 *
 * This stores our custom plugins outside of the contrib directory,
 * since updating the module would erase these files from within the
 * ckeditor module.
 *
 * Any custom ckeditor plugins written for NYULMC live here, as well as some
 * others. See the plugins directory for the source, or this module for which
 * ones are enabled.
 */

/**
 * Add our plugins to CKEditor, the non-invasive way.
 *
 * Impliments hook_wysiwyg_plugin().
 */
function nyulmc_ckeditor_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      $plugins = array();
      $plugins['nyulmc_callout'] = array(
        // Plugin name.
        'buttons' => array(
           'nyulmc_callout' => 'NYULMC Callout',
        ),
        'name' => 'nyulmc_callout',
        // Plugin description - it will be displayed in the plugins management section of the profile settings.
        'desc' => t('NYULMC: Inline Callout plugin.'),
        // The full path to the CKEditor plugin directory, trailing slash included.
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_callout/',
        'load' => TRUE,
      );
      $plugins['nyulmc_location'] = array(
        'buttons' => array(
           'nyulmc_location' => 'NYULMC Location',
        ),
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_location/',
        'load' => TRUE,
      );
      $plugins['nyulmc_quote'] = array(
        'buttons' => array(
           'nyulmc_quote' => 'NYULMC Quote',
        ),
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_quote/',
        'load' => TRUE,
      );
      $plugins['nyulmc_photo_quote'] = array(
        'buttons' => array(
           'nyulmc_photo_quote' => 'NYULMC Photo Quote',
        ),
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_photo_quote/',
        'load' => TRUE,
      );
      $plugins['nyulmc_media_link'] = array(
        'buttons' => array(
           'nyulmc_media_link' => 'NYULMC Media Link',
        ),
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_media_link/',
        'load' => TRUE,
      );
      $plugins['nyulmc_caption'] = array(
        'buttons' => array(
           'nyulmc_caption' => 'NYULMC Caption',
        ),
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_caption/',
        'load' => TRUE,
      );
      $plugins['stat'] = array(
        'buttons' => array(
           'stat' => 'Stat',
        ),
        'path' => drupal_get_path('module','nyulmc_ckeditor') . '/plugins/stat/',
        'load' => TRUE,
      );
      $plugins['nyulmc_fullwidth_caption'] = array(
        'buttons' => array(
          'nyulmc_fullwidth_caption' => 'NYULMC Full-width Caption',
        ),
        'path' => drupal_get_path('module', 'nyulmc_ckeditor') . '/plugins/nyulmc_fullwidth_caption/',
        'load' => TRUE,
      );
      return $plugins;
  }
}

/**
 * Customize the layout of the ckeditor.
 *
 * Implements hook_wysiwyg_editor_settings_alter()
 */
function nyulmc_ckeditor_wysiwyg_editor_settings_alter(&$settings, $context) {

  // The $context variable contains information about the wysiwyg profile we're using
  // In this case we just need to check that the editor being used is ckeditor
  if ($context['profile']->editor == 'ckeditor') {

    // Make sure the toolbar is there
    if (!empty($settings['toolbar'])) {

      // These are our desired groupings. Buttons that aren't listed here will be
      // Grouped in one big group at the end
      $preferred_groupings[] = array('Format');
      $preferred_groupings[] = array('Bold', 'Italic', 'Underline', 'Strike', '-');

      $preferred_groupings[] = array('BulletedList', 'NumberedList', 'HorizontalRule', 'nyulmc_callout', 'Link', 'Unlink', 'Anchor', '-');
      $preferred_groupings[] = array('Superscript', 'Subscript', 'Blockquote');
      $preferred_groupings[] = array('Image', 'break', 'nyulmc_quote', 'nyulmc_location', 'media', 'nyulmc_media_link', 'nyulmc_photo_quote', 'simplebox');
      $preferred_groupings[] = array('Font', 'FontSize', 'Styles', 'Table');

      // An array to hold our newly grouped buttons
      $new_grouped_toolbar = array();

      // Compare each desired groupings to the configured buttons in the toolbar
      // and add them if they are there
      foreach($preferred_groupings as $button_group){

        // array_intersect() compares two arrays and returns an array of values
        // That are present in both arrays.
        $matching_buttons = array_intersect($button_group, $settings['toolbar'][0]);

        if (!empty($matching_buttons)) {
          // If there are matching buttons, we add it as an array to our
          // $new_grouped_toolbar. We run $matching_buttons through array_values()
          // to reset the array keys back to starting from 0.
          $new_grouped_toolbar[] = array_values($matching_buttons);
        }
      }

      // For extra safety, we're going to find any remaining buttons that we
      // missed. To do this we need to flatten our grouped buttons and compare
      // that against the original toolbar to see if we missed anything
      $new_flattened_toolbar = array();

      // Flatten our grouped buttons
      foreach ($new_grouped_toolbar as $key => $group) {
        $new_flattened_toolbar = array_merge($new_flattened_toolbar, $group);
      }

      // Array diff returns the keys that are present in the first argument, but
      // not not present in the second
      $remaining_buttons = array_diff($settings['toolbar'][0], $new_flattened_toolbar);

      if (!empty($remaining_buttons)) {
        // reset the array keys and add it to the $new_grouped_toolbar
        $new_grouped_toolbar[] = array_values($remaining_buttons);
      }

      // Replace the toolbar with our new, grouped toolbar.
      $settings['toolbar'] = $new_grouped_toolbar;

    }
  }
}

